"""
Usando los fundamentos de programacion orientada a objetos de Python, vamos a crear un catalogo de peliculas que permitir치 a un 
usuario buscar, agregar, listar o borrar las peliculas que se mostraran. 

Nuestro programa requerira que la logica que permitir치 ejecutar el programa se ejecute en 2 archivos .py

En el primer archivo estar치 escrita la l칩gica de la class Pelicula que se encargara de representar una pel칤cula con sus atributos y uno 
de estos atributos debe ser privado. Por ahora solo le pondremos el atributo de nombre, pero podr칤amos ir a agregando otros como: 
["Nombre de Director", "Genero", "A침o de extreno"].

En el segundo archivo estar치 la l칩gica que permitir치 ejecutar el programa. Este archivo se encargar치 de leer la lista de pel칤culas que 
hemos creado en un archivo txt. Adem치s, es en este archivo donde desarrollaremos la l칩gica para que el usuario pueda :
a. Buscar
b. Agregar
c. Listar
d. Borrar

Empleando un menu de opciones que ser치 lo primero que el programa muestre al momento de ejecutarse.

Vamos con lo primero, el archivo que contengan la class Pelicula
"""

#游댮Primero archivo.

#Lo primero que haremos es definir la class Pelicula para organizar el c칩digo  
#El nombre de la clase puede ser cualquier nombre que el programador considere, pero dado el ejercicio, es conveniente que siga la logica del programa empleando palabras que se puedan relacionar
class Pelicula:
    #declaramos un constructor empleando __int__
    def __init__(self, nombre): #self es un metodo que se emplean cuando se construyen clases para acceder a la propiedades que asiganamos a la clase
        self.__nombre = nombre  #Creamos un atributo privado empleando dos guines bajos. Los atributos privados permiten proteger la informacion de este atributo y que no sea de facil acceso

    def obtener_nombre(self):
        return self.__nombre  # M칠todo para acceder al nombre
    
#Seria bueno explicar mejor algunas parte del codigo
#podria agregar el atributo genero a def __int__(self, nombre, genero)

